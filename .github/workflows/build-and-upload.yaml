name: Build and Upload

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  Get-Check-Versions:
    runs-on: ubuntu-latest
    outputs:
      accel_commit: ${{ steps.accel_commit.outputs.accel_commit }}
      accel_version: ${{ steps.accel_version.outputs.accel_version }}
      ipoe_pkg_version: ${{ steps.ipoe_pkg_version.outputs.ipoe_pkg_version }}
      vlan_mon_pkg_version: ${{ steps.vlan_mon_pkg_version.outputs.vlan_mon_pkg_version }}
      disable_pkg: ${{ steps.disable_pkg.outputs.disable_pkg }}


    steps:
      - name: Check out accel-ppp repository code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/accel-ppp
          ref: dkms2
          fetch-depth: 0
      - id: accel_commit
        run: echo accel_commit=`git rev-parse HEAD` >> "$GITHUB_OUTPUT"
      - id: accel_version
        run: echo accel_version=`git describe --tags` >> "$GITHUB_OUTPUT"
      - id: ipoe_pkg_version
        run: >
          echo ipoe_pkg_version=\
            `git describe --tags --abbrev=0`-\
            `git rev-list $(git describe --tags --abbrev=0)..HEAD --count drivers/ipoe`-\
            g`git rev-parse --short HEAD ` >> "$GITHUB_OUTPUT"
      - id: vlan_mon_pkg_version
        run: >
          echo vlan_mon_pkg_version=\
            `git describe --tags --abbrev=0`-\
            `git rev-list $(git describe --tags --abbrev=0)..HEAD --count drivers/vlan_mon`-\
            g`git rev-parse --short HEAD ` >> "$GITHUB_OUTPUT"
      - name: Check out accel-ppp-deb repository code
        uses: actions/checkout@v4
        with:
          path: accel-ppp-deb
          fetch-depth: 1
      - name: Get last commit pushed to repository (nightly build)
        run: echo LAST_PROCESSED_ACCEL_COMMIT=`cat accel-ppp-deb/state/commit_sha_nightly` >> $GITHUB_ENV;
      - id: disable_pkg
        if: ${{ steps.accel_commit.outputs.accel_commit == env.LAST_PROCESSED_ACCEL_COMMIT }}
        name: Disable next jobs if no new commits (no new commits)
        run: echo disable_pkg=true >> "$GITHUB_OUTPUT"



  Build-in-Container-Debian:
    needs: Get-Check-Versions
    if: ${{ needs.Get-Check-Versions.outputs.disable_pkg != 'true' }}
    strategy:
      fail-fast: true
      matrix:
        distro:
          [
            "debian:10",
            "debian:11",
            "debian:12",
            "debian:trixie",
            "ubuntu:20.04",
            "ubuntu:22.04",
            "ubuntu:24.04",
          ]
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.distro }}
    steps:
      - name: Set distro-specific vars
        run: >
          HEADERS_SUFFIX=`uname -m | sed s/aarch64/arm64/ | sed s/x86_64/amd64/`;
          DISTRO=`echo ${{ matrix.distro }} |  sed 's/://'`;
          case "${{ matrix.distro }}" in
          debian:trixie) DISTRO=debian13; CPACK_TYPE=Debian13; CODENAME=trixie ;;
          debian:12) DISTRO=debian12; CPACK_TYPE=Debian12; CODENAME=bookworm ;;
          debian:11) CPACK_TYPE=Debian11; CODENAME=bullseye ;;
          debian:10) CPACK_TYPE=Debian10; CODENAME=buster ;;
          ubuntu:24.04) CPACK_TYPE=Ubuntu24; CODENAME=noble ; HEADERS_SUFFIX=generic ;;
          ubuntu:22.04) CPACK_TYPE=Ubuntu22; CODENAME=jammy ; HEADERS_SUFFIX=generic ;;
          ubuntu:20.04) CPACK_TYPE=Ubuntu20; CODENAME=focal ; HEADERS_SUFFIX=generic ;;
          esac;
          echo HEADERS_SUFFIX=$HEADERS_SUFFIX >> $GITHUB_ENV;
          echo DISTRO=$DISTRO >> $GITHUB_ENV;
          echo CODENAME=$CODENAME >> $GITHUB_ENV;
          echo CPACK_TYPE=$CPACK_TYPE >> $GITHUB_ENV;
          echo UNAME_M=`uname -m` >> $GITHUB_ENV;
          echo NEEDRESTART_SUSPEND=1 >> $GITHUB_ENV;
          echo DEBIAN_FRONTEND=noninteractive  >> $GITHUB_ENV;
          echo DEBCONF_NONINTERACTIVE_SEEN=true >> $GITHUB_ENV;
          cat $GITHUB_ENV
      - name: Install build tools
        run: >
          apt update && apt -y upgrade && apt -y dist-upgrade &&
          apt -y install git build-essential cmake gcc 
          linux-headers-${{ env.HEADERS_SUFFIX }}
          libpcre3-dev libssl-dev liblua5.1-0-dev kmod dkms debhelper devscripts
      - name: Install additional build tools (using apt) (for some OS)
        run: apt -y install dh-dkms || exit 0
      - name: Get kernel name from headers
        run: >
          echo KERNEL_NAME=`ls -1 /usr/src/ | grep  'linux-headers.*${{ env.HEADERS_SUFFIX }}' | 
          sed 's/linux-headers-//'` >> $GITHUB_ENV;
          cat $GITHUB_ENV
      - name: Check out accel-ppp repository code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/accel-ppp
          ref: ${{needs.Get-Check-Versions.outputs.accel_commit}}
          fetch-depth: 0
      - name: Disable git security warnings
        run: git config --global --add safe.directory '*'
      - name: mkdir build
        run: mkdir build
      - name: cmake
        working-directory: ./build
        run: >
          cmake -DBUILD_IPOE_DRIVER=FALSE -DBUILD_VLAN_MON_DRIVER=FALSE -DCMAKE_INSTALL_PREFIX=/usr 
          -DKDIR=/usr/src/linux-headers-${{ env.KERNEL_NAME }}
          -DMODULES_KDIR=${{ env.KERNEL_NAME }}
          -DLUA=TRUE -DSHAPER=TRUE -DRADIUS=TRUE 
          -DCPACK_TYPE=${{ env.CPACK_TYPE }} ..
      - name: make
        working-directory: ./build
        run: make
      - name: Generate debian package (without drivers)
        working-directory: ./build
        run: cpack -G DEB
      - name: Rename accel-ppp deb package
        working-directory: ./build
        run: >
          mv -v accel-ppp.deb 
          accel-ppp_${{ env.CODENAME }}.deb
      - name: build dkms package for ipoe
        working-directory: ./drivers/dkms/ipoe
        run: |
          cp -f ../../../build/version.h src/
          debuild -us -uc -tc -b
      - name: build dkms package for vlan_mon
        working-directory: ./drivers/dkms/vlan_mon
        run: |
          cp -f ../../../build/version.h src/
          debuild -us -uc -tc -b
      - name: Upload accel-ppp .deb package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-accel-ppp-${{ env.CODENAME }}
          path: build/accel-ppp_*.deb
          if-no-files-found: error
      - name: Upload driver .deb packages as artifact
        if: ${{ false }}
        uses: actions/upload-artifact@v4
        with:
          name: deb-accel-ppp-drivers-dkms-${{ env.CODENAME }}
          path: drivers/dkms/accel-ppp*.deb
          if-no-files-found: error

  Upload-to-Repo:
    needs: [Build-in-Container-Debian, Get-Check-Versions]
    if: ${{ needs.Get-Check-Versions.outputs.disable_pkg != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install reprepro
        run: sudo apt update && sudo apt -y install reprepro

      - name: Import GPG key for signing debian packages
        run: echo "$GPG_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_KEY: ${{ secrets.DEB_PKG_GPG_KEY }}

      - name: Check out accel-ppp-deb repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: incoming
          merge-multiple: true

      - name: List built packages
        run: ls -la incoming

      - name: Add packages to repository
        run: >
          for codename in buster bullseye bookworm trixie focal jammy noble ; do
            echo Add packages for distro codename=${codename};
            reprepro -V --section net --component nightly --priority 0 includedeb ${codename} incoming/*_${codename}.deb;
          done
      
      - name: Save accel-ppp commit hash (nightly)
        run: echo $ACCEL_COMMIT > state/commit_sha_nightly
        env:
          ACCEL_COMMIT: ${{needs.Get-Check-Versions.outputs.accel_commit}}

      - name: Push changes to repository
        run: |
          git config user.name build-upload-bot
          git config user.email no-reply@github.com
          git add .
          git commit -m "accel-ppp nightly $ACCEL_VERSION"
          git push
        env:
          ACCEL_VERSION: ${{needs.Get-Check-Versions.outputs.accel_version}}
