# This workflow does the following:
# 1. Check if there are new commits in accel-ppp repository and decide if it is required to
#    update nightly builds or release repository (job: Get-Check-Versions)
# 2. Build deb packages for nightly and release repositories. Packages are split to accel-ppp
#    and dkms drivers packages (accel-ppp-ipoe-dkms and accel-ppp-vlan-mon-dkms) (job: Build-Deb)
# 3. Add built packages to APT repository and push updated APT repository to git repository. This
#    job also stores processed accel-ppp version (commit sha) for step 1 for next run
#    (job: Upload-to-Repo)
#
# Package Versioning
# accel-ppp and drivers packages versions are different. It is done to avoid updating driver
# packages in case of no changes related to the driver
#
# GPG Key Management
# Deb packages should be signed. The following section describes signing process
# 1. To generate public and private keys: `gpg --full-generate-key`, select key=RSA and RSA, 4096 bit,
#    choose no password protection (password protection will not enchance security)
# 2. Get subkey-id(!) from the output of the command: `gpg --list-secret-key --with-subkey-fingerprint`,
#    for example 322ACAC560CE6F2C3E9AAD897D78E93FC639AB34
# 3. To export public key (stored in accel-ppp-deb.gpg.key to provide it repository users): 
#    `gpg --armor --output accel-ppp-deb.gpg.key --export-options export-minimal \
#         --export 322ACAC560CE6F2C3E9AAD897D78E93FC639AB34`
# 4. To export private key: `gpg --armor --export-secret-key 322ACAC560CE6F2C3E9AAD897D78E93FC639AB34`.
#    Store the output in 'DEB_PKG_GPG_KEY' repository secret, it is be used as secrets.DEB_PKG_GPG_KEY
#    in Upload-to-Repo job
# 5. Use subkey-id as a value for SignWith field in 'conf/distributions' file
name: Build and Upload

on:
  workflow_dispatch:

# This workflow does 'git push' to store packages and auxiliary files related to apt repository
# so write permissions are required
permissions:
  contents: write

jobs:
  Get-Check-Versions:
    runs-on: ubuntu-latest
    outputs:
      # accel_commit is used to decide whether there are new commits in accel-ppp repository
      accel_commit: ${{ steps.accel_commit.outputs.accel_commit }}
      accel_ipoe_commit: ${{ steps.accel_commit.outputs.accel_ipoe_commit }}
      accel_vlan_mon_commit: ${{ steps.accel_commit.outputs.accel_vlan_mon_commit }}
      accel_version: ${{ steps.accel_version.outputs.accel_version }}
      ipoe_pkg_version: ${{ steps.ipoe_pkg_version.outputs.ipoe_pkg_version }}
      vlan_mon_pkg_version: ${{ steps.vlan_mon_pkg_version.outputs.vlan_mon_pkg_version }}
      disable_all_pkg: ${{ steps.disable_all_pkg.outputs.disable_all_pkg }}
      disable_ipoe_pkg: ${{ steps.disable_ipoe_pkg.outputs.disable_ipoe_pkg }}
      disable_vlan_mon_pkg: ${{ steps.disable_vlan_mon_pkg.outputs.disable_vlan_mon_pkg }}

    steps:
      - name: Check out accel-ppp repository code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/accel-ppp
          ref: dkms2
          fetch-depth: 0
      - id: accel_commit
        run: |
          echo accel_commit=`git rev-parse HEAD` >> "$GITHUB_OUTPUT"
          echo accel_ipoe_commit=`git rev-list HEAD -1 -- drivers/ipoe` >> "$GITHUB_OUTPUT"
          echo accel_vlan_mon_commit=`git rev-list HEAD -1 -- drivers/vlan_mon` >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
      - id: accel_version
        run: echo accel_version=`git describe --tags` >> "$GITHUB_OUTPUT"
      - id: ipoe_pkg_version
        run: echo ipoe_pkg_version=`git describe --tags --abbrev=0`-`git rev-list $(git describe --tags --abbrev=0)..HEAD --count drivers/ipoe`-g`git rev-parse --short HEAD ` >> "$GITHUB_OUTPUT"
      - id: vlan_mon_pkg_version
        run: echo vlan_mon_pkg_version=`git describe --tags --abbrev=0`-`git rev-list $(git describe --tags --abbrev=0)..HEAD --count drivers/vlan_mon`-g`git rev-parse --short HEAD ` >> "$GITHUB_OUTPUT"

      - name: Check out accel-ppp-deb repository code
        uses: actions/checkout@v4
        with:
          path: accel-ppp-deb
          fetch-depth: 1
      - name: Get last commit pushed to repository (nightly)
        run: |
          echo LAST_PROCESSED_ACCEL_COMMIT=`cat accel-ppp-deb/state/commit_sha_nightly` >> $GITHUB_ENV;
          echo LAST_PROCESSED_IPOE_COMMIT=`cat accel-ppp-deb/state/ipoe_commit_sha_nightly` >> $GITHUB_ENV;
          echo LAST_PROCESSED_VLAN_MON_COMMIT=`cat accel-ppp-deb/state/vlan_mon_commit_sha_nightly` >> $GITHUB_ENV;

      - id: disable_all_pkg
        if: ${{ steps.accel_commit.outputs.accel_commit == env.LAST_PROCESSED_ACCEL_COMMIT }}
        name: Disable all builds
        run: echo disable_all_pkg=true >> "$GITHUB_OUTPUT"
      - id: disable_ipoe_pkg
        if: ${{ steps.accel_commit.outputs.accel_ipoe_commit == env.LAST_PROCESSED_IPOE_COMMIT }}
        name: Disable ipoe build
        run: echo disable_ipoe_pkg=true >> "$GITHUB_OUTPUT"
      - id: disable_vlan_mon_pkg
        if: ${{ steps.accel_commit.outputs.accel_vlan_mon_commit == env.LAST_PROCESSED_VLAN_MON_COMMIT }}
        name: Disable vlan_mon build
        run: echo disable_vlan_mon_pkg=true >> "$GITHUB_OUTPUT"

  Build-Deb:
    needs: Get-Check-Versions
    if: ${{ needs.Get-Check-Versions.outputs.disable_all_pkg != 'true' }}
    strategy:
      fail-fast: true
      matrix:
        # This list should contain supported versions of Debian and Ubuntu
        distro:
          [
            "debian:10",
            "debian:11",
            "debian:12",
            "debian:trixie",
            "ubuntu:20.04",
            "ubuntu:22.04",
            "ubuntu:24.04",
          ]
        component: ["release", "nightly"]
    runs-on: ubuntu-latest
    container:
      # Build is done on native OS in container to avoid cross-OS build issues
      image: ${{ matrix.distro }}
    steps:
      - name: Set distro-specific vars
        run: >
          HEADERS_SUFFIX=`uname -m | sed s/aarch64/arm64/ | sed s/x86_64/amd64/`;
          DISTRO=`echo ${{ matrix.distro }} |  sed 's/://'`;
          case "${{ matrix.distro }}" in
          debian:trixie) DISTRO=debian13; CPACK_TYPE=Debian13; CODENAME=trixie ;;
          debian:12) DISTRO=debian12; CPACK_TYPE=Debian12; CODENAME=bookworm ;;
          debian:11) CPACK_TYPE=Debian11; CODENAME=bullseye ;;
          debian:10) CPACK_TYPE=Debian10; CODENAME=buster ;;
          ubuntu:24.04) CPACK_TYPE=Ubuntu24; CODENAME=noble ; HEADERS_SUFFIX=generic ;;
          ubuntu:22.04) CPACK_TYPE=Ubuntu22; CODENAME=jammy ; HEADERS_SUFFIX=generic ;;
          ubuntu:20.04) CPACK_TYPE=Ubuntu20; CODENAME=focal ; HEADERS_SUFFIX=generic ;;
          esac;
          echo HEADERS_SUFFIX=$HEADERS_SUFFIX >> $GITHUB_ENV;
          echo DISTRO=$DISTRO >> $GITHUB_ENV;
          echo CODENAME=$CODENAME >> $GITHUB_ENV;
          echo CPACK_TYPE=$CPACK_TYPE >> $GITHUB_ENV;
          echo UNAME_M=`uname -m` >> $GITHUB_ENV;
          echo NEEDRESTART_SUSPEND=1 >> $GITHUB_ENV;
          echo DEBIAN_FRONTEND=noninteractive  >> $GITHUB_ENV;
          echo DEBCONF_NONINTERACTIVE_SEEN=true >> $GITHUB_ENV;
          cat $GITHUB_ENV
      - name: Install build tools
        run: >
          apt update && apt -y upgrade && apt -y dist-upgrade &&
          apt -y install git build-essential cmake gcc 
          linux-headers-${{ env.HEADERS_SUFFIX }}
          libpcre3-dev libssl-dev liblua5.1-0-dev kmod dkms debhelper devscripts
      - name: Install additional build tools (using apt) (for some OS)
        run: apt -y install dh-dkms || exit 0
      - name: Get kernel name from headers
        run: >
          echo KERNEL_NAME=`ls -1 /usr/src/ | grep  'linux-headers.*${{ env.HEADERS_SUFFIX }}' | 
          sed 's/linux-headers-//'` >> $GITHUB_ENV;
          cat $GITHUB_ENV

      - name: Check out accel-ppp repository code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/accel-ppp
          ref: ${{needs.Get-Check-Versions.outputs.accel_commit}}
          fetch-depth: 0
      - name: Disable git security warnings
        run: git config --global --add safe.directory '*'
      - name: mkdir build
        run: mkdir build
      - name: cmake
        working-directory: ./build
        run: >
          cmake -DBUILD_IPOE_DRIVER=FALSE -DBUILD_VLAN_MON_DRIVER=FALSE -DCMAKE_INSTALL_PREFIX=/usr 
          -DKDIR=/usr/src/linux-headers-${{ env.KERNEL_NAME }}
          -DMODULES_KDIR=${{ env.KERNEL_NAME }}
          -DLUA=TRUE -DSHAPER=TRUE -DRADIUS=TRUE 
          -DCPACK_TYPE=${{ env.CPACK_TYPE }} ..
      - name: make
        working-directory: ./build
        run: make
      - name: Generate debian package (without drivers)
        working-directory: ./build
        run: cpack -G DEB
      # debuild is used to build dkms package so package version is extracted from debian 
      # changelog (drivers/dkms/ipoe/debian/changelog). dch tool is required to set correct version 
      # of the package calculated in Get-Check-Versions job
      - name: build dkms package for ipoe (if there new commits related to driver)
        if: ${{ needs.Get-Check-Versions.outputs.disable_ipoe_pkg != 'true' }}
        working-directory: ./drivers/dkms/ipoe
        run: |
          dch -b -D unstable -v "$IPOE_PKG_VERSION~$CPACK_TYPE" ""
          cp -f ../../../build/version.h src/
          debuild -us -uc -tc -b
        env:
          IPOE_PKG_VERSION: ${{needs.Get-Check-Versions.outputs.ipoe_pkg_version}}
      - name: build dkms package for vlan_mon (if there new commits related to driver)
        if: ${{ needs.Get-Check-Versions.outputs.disable_vlan_mon_pkg != 'true' }}
        working-directory: ./drivers/dkms/vlan_mon
        run: |
          dch -b -D unstable -v "$VLAN_MON_PKG_VERSION~$CPACK_TYPE" ""
          cp -f ../../../build/version.h src/
          debuild -us -uc -tc -b
        env:
          VLAN_MON_PKG_VERSION: ${{needs.Get-Check-Versions.outputs.vlan_mon_pkg_version}}

      - name: Upload accel-ppp and drivers .deb packages as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-deb-accel-ppp-${{ env.CODENAME }}
          path: |
            build/*.deb
            drivers/dkms/*.deb
          if-no-files-found: error

  # This job waits for all the packages to be built and adds them all to APT repository, 
  # then uploads them to GIT repository in one commit. This approach is required to avoid
  # conflicts in case of parallel git pushes
  Upload-to-Repo:
    needs: [Build-Deb, Get-Check-Versions]
    if: ${{ needs.Get-Check-Versions.outputs.disable_all_pkg != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install reprepro
        run: sudo apt update && sudo apt -y install reprepro

      - name: Import GPG key for signing debian packages
        run: echo "$GPG_KEY" | gpg --batch --import
        env:
          GPG_KEY: ${{ secrets.DEB_PKG_GPG_KEY }}

      - name: Check out accel-ppp-deb repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download all built packages
        uses: actions/download-artifact@v4
        with:
          path: incoming
          merge-multiple: false

      - name: List built packages
        run: ls -laR incoming

      - name: Add packages to repository
        run: >
          for component in nightly release ; do
            for codename in buster bullseye bookworm trixie focal jammy noble ; do
              echo Add accel-ppp for distro codename=${codename} component=$component;
              reprepro -V --section net --component $component --priority 0 includedeb ${codename} incoming/$component-deb-accel-ppp-${codename}/*/*.deb;
              echo Add drivers for distro codename=${codename} component=$component;
              reprepro -V --section net --component $component --priority 0 includedeb ${codename} incoming/$component-deb-accel-ppp-${codename}/*/*/*.deb || echo TODO;
            done
          done

      - name: Save accel-ppp and drives commit hashes (nightly)
        run: |
          echo $ACCEL_COMMIT > state/commit_sha_nightly
          echo $ACCEL_IPOE_COMMIT > state/ipoe_commit_sha_nightly
          echo $ACCEL_VLAN_MON_COMMIT > state/vlan_mon_commit_sha_nightly
        env:
          ACCEL_COMMIT: ${{needs.Get-Check-Versions.outputs.accel_commit}}
          ACCEL_IPOE_COMMIT: ${{needs.Get-Check-Versions.outputs.accel_ipoe_commit}}
          ACCEL_VLAN_MON_COMMIT: ${{needs.Get-Check-Versions.outputs.accel_vlan_mon_commit}}

      - name: Push changes to git repository
        run: |
          git config user.name build-upload-bot
          git config user.email no-reply@github.com
          git add .
          git commit -m "accel-ppp nightly $ACCEL_VERSION"
          git push
        env:
          ACCEL_VERSION: ${{needs.Get-Check-Versions.outputs.accel_version}}
